import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import java.util.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;

public class permissionExtractor {

    public static void main(String[] args) {
//create a list to store system permissions extracted by the script.
      List<String> extractedpermission = new ArrayList<>();
//create a file so that when marked as suspicious we could delete it.
      File FileObj = new File("Androidmanifest.xml");
//create a document builder for reading the xml file.
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(new File("Androidmanifest.xml"));
            document.getDocumentElement().normalize();

// Get all the element by the tag name
            NodeList permissions = document.getElementsByTagName("uses-permission");
//loop for when extracting many uses-permission.
            for(int i = 0; i <permissions.getLength(); i++) {
                Node permission = permissions.item(i);
                if(permission.getNodeType() == Node.ELEMENT_NODE) {
//to extract the specific uses-permision we get the attribute.
                    Element permissionElement = (Element) permission;
                    String a = permissionElement.getAttribute("android:name");
//we add those extracted permissions to our Arraylist.
                    extractedpermission.add(a);
            




                }

            }    
                if (extractedpermission.contains("android.permission.ACCESS_SUPERUSER") && extractedpermission.contains("android.permission.WRITE_EXTERNAL_STORAGE")&& extractedpermission.contains("android.permission.READ_EXTERNAL_STORAGE")) {
                    System.out.println("Suspicious");
                    Scanner q1 = new Scanner(System.in);  // Create a Scanner object
                    System.out.println("File has been marked as suspicious, Delete?Y/N");
                    String q2 = q1.nextLine();
                     if (q2 =="Y") {
                        boolean deleted = FileObj.delete(); // Delete the file
                     if (deleted) {
                        System.out.println("File deleted successfully.");
                     } else {
                        System.out.println("Failed to delete the file.");
            }
                     } else {
                        System.out.println("File doesn't exist.");
        }
                  } else if(extractedpermission.contains("android.permsission.ACCESS_NETWORK_STATE") && extractedpermission.contains("android.permission.INTERNET")) {
                    System.out.println("Hi");
                  } else if(extractedpermission.contains("android.permission.ACCESS_NETWORK_STATE") && extractedpermission.contains("android.permission.INTERNET")) {
                    System.out.println("Hi");
                  }else{
                    System.out.println("None");
              }


        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }


    }
}
