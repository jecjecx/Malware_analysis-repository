package com.example.thesis;
import static androidx.constraintlayout.motion.utils.Oscillator.TAG;

import android.app.Activity;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import android.app.Activity;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.content.Context;

import com.example.thesis.ml.Model;

import org.tensorflow.lite.DataType;
import org.tensorflow.lite.support.tensorbuffer.TensorBuffer;


public class MainActivity extends Activity {
    private TextView testView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        String b;
        List<String[]> data = new ArrayList<>();
        data.add(
                new String[] { "transact"
                });
        data.add(new String[] {  "0" });
        String csvFileName = "output.csv";
        String csvFilePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath() + File.separator + csvFileName;

        testView = findViewById(R.id.testView);
        List<String> extractedpermission = new ArrayList<>();


        Button button = findViewById(R.id.circularButton);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                View contentView = getLayoutInflater().inflate(R.layout.content_view, null);
                setContentView(contentView);
                ListView listView = findViewById(R.id.listView);
                List<String> packageNames = new ArrayList<>();

                PackageManager packageManager = getPackageManager();
                List<ApplicationInfo> packages = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);
                Map<String, String> appNameToPackageNameMap = new HashMap<>();
                for (ApplicationInfo packageInfo : packages) {
                    String appName = packageManager.getApplicationLabel(packageInfo).toString(); // Get the application name
                    packageNames.add(appName);


                    appNameToPackageNameMap.put(appName, packageInfo.packageName);
                }



                // Create an ArrayAdapter to display the list of application names in a ListView
                ArrayAdapter<String> adapter = new ArrayAdapter<>(MainActivity.this, android.R.layout.simple_list_item_1, packageNames);
                listView.setAdapter(adapter);

                // Set an item click listener for the ListView
                listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                        String selectedApplicationName = packageNames.get(position);
                        String selectedPackageName = appNameToPackageNameMap.get(selectedApplicationName); // Get the corresponding package name
                        String[] permissions = getAppPermissions(MainActivity.this, selectedPackageName);
                        if (permissions != null) {
                            // Permissions found, display them using a Toast
                            StringBuilder message = new StringBuilder();
                            for (String permission : permissions) {

                                String wordToRemove = "android.permission.";
                                String permissionName = permission.replaceAll("\\b" + wordToRemove + "\\b", "");
                                message.append("Permission: ").append(permission).append("\n");
                                extractedpermission.add(permissionName);

                                for (String extractedPermission : extractedpermission) {
                                    for (int i = 0; i < data.get(0).length; i++) {
                                        if (data.get(0)[i].equals(extractedPermission)) {
                                            data.get(1)[i] = "1"; // Update the corresponding column to "1"
                                        }
                                    }
                                }

                                String csvFileName = "output.csv";
                                String csvFilePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath() + File.separator + csvFileName;

                                try (FileWriter writer = new FileWriter(csvFilePath)) {
                                    for (String[] rowData : data) {
                                        writer.append(String.join(",", rowData));
                                        writer.append("\n");
                                    }

                                    showToast("CSV file created successfully! Saved to: " + csvFilePath);
                                } catch (IOException e) {
                                    showToast("Error writing to CSV file: " + e.getMessage());
                                }


                            }
                            doInference(data);
                            showToast(message.toString());

                        } else {
                            // Permissions not found, display a toast indicating the same
                            showToast("Permissions not found for " + selectedApplicationName);
                        }


                    }

                });
            }
        });
    }

    public void doInference(List<String[]> myArray)
    {
        try {
            Model model = Model.newInstance(getApplicationContext());

            // Creates inputs for reference.
            TensorBuffer inputFeature0 = TensorBuffer.createFixedSize(new int[]{1, 215}, DataType.FLOAT32);

            ByteBuffer byteBuffer = ByteBuffer.allocateDirect(4 * myArray.get(1).length);
            byteBuffer.order(ByteOrder.nativeOrder());

            for (int i = 0; i < myArray.get(1).length; i++) {
                byteBuffer.putFloat(Float.parseFloat(myArray.get(1)[i]));
            }

            inputFeature0.loadBuffer(byteBuffer);

            // Runs model inference and gets result.
            Model.Outputs outputs = model.process(inputFeature0);
            TensorBuffer outputFeature0 = outputs.getOutputFeature0AsTensorBuffer();

            float[] confidences = outputFeature0.getFloatArray();

            int maxPos = 0;
            float maxConfidence = 0;
            for (int i = 0; i < confidences.length; i++) {

                if (confidences[i] > maxConfidence) {
                    maxConfidence = confidences[i];
                    maxPos = i;
                }
            }

            String[] classes = {"Benign", "Malicious"};
            String result = classes[maxPos];
            System.out.println(classes[maxPos]);

            runOnUiThread(() -> {
                setContentView(R.layout.activity_main); // Switch back to the main layout
                testView = findViewById(R.id.testView); // Reinitialize the TextView
                if (testView != null) {
                    testView.setText(result);
                } else {
                    Log.e("TAG", "testView is null");
                }
            });

            // Releases model resources if no longer used.
            model.close();

        } catch (IOException e) {
            // TODO Handle the exception
        }
    }

    public String[] getAppPermissions(Context context, String packageName) {
        try {
            // Get PackageManager instance
            PackageManager packageManager = context.getPackageManager();

            // Get PackageInfo for the target application
            PackageInfo packageInfo = packageManager.getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);

            // Extract the requested permissions
            return packageInfo.requestedPermissions;
        } catch (PackageManager.NameNotFoundException e) {
            // Handle exception if the package is not found
            e.printStackTrace();
            return null;
        }
    }

    private void showToast(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }
}
